/* equality test generation                                                  */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

macro @pi-trm N T F :-
  pi x xx\ decl x N T => (feqb.trm->term xx x :- !) => F xx x.

pred derive.eqb.main i:inductive, i:string, o:list prop.
derive.eqb.main I Prefix CL :- std.do! [
  std.assert! (eqType I FI) "this inductive is not supported",

  derive.eqb.eqbf.main FI FI [] [] R,
  std.assert-ok! (coq.typecheck R Rty) "derive.eqbf generates illtyped term",
  Name is Prefix ^ "eqb_fields",
  coq.env.add-const Name R Rty ff C,
  EQBF = global (const C),

  derive.eqb.eqb.main FI FI [] [] EQBF R1Skel,
  std.assert-ok! (coq.elaborate-skeleton R1Skel R1ty R1) "derive.eqb generates illtyped term", % need elaborate for prim record
  Name1 is Prefix ^ "eqb",
  coq.env.add-const Name1 R1 R1ty ff C1,
  EQB = global (const C1),

  % populate dbs
  derive.eqb.eqbf.do-clause FI FI [] [] EQBF [] CL1,
  derive.eqb.eqb.do-clause FI FI [] [] EQB [] CL2,
  CL = [CL1,CL2],
  std.forall CL (x\ coq.elpi.accumulate _ "derive.eqb.db" (clause _ _ x)),
].

namespace derive.eqb.eqb {

% -----------------------------------------------------------------------------
pred main i:eqType, i:eqType, i:list term, i:list term, i:term, o:term.

main (type-param FI) (type-param FJ) PI PJ EF {{ fun (x : Type) (eqx : x -> x -> bool) => lp:(R x eqx) }} :-
  @pi-trm `x` {{ Type }} y\x\
  @pi-decl `eqx` {{ lp:x -> lp:x -> bool }} eqx\
    main (FI y) (FJ y) [x|PI] [x|PJ] {coq.mk-app EF [x,eqx]} (R x eqx).

main (value-param TYI FI) (value-param TYJ FJ) PI PJ EF {{ fun (x : lp:TI) (y : lp:TJ) => lp:(R x y) }} :-
  feqb.trm->term TYI TI,
  feqb.trm->term TYJ TJ,
  @pi-trm `x` TI xx\x\
  @pi-trm `y` TJ yy\y\
   main (FI xx) (FJ yy) [x|PI] [y|PJ] {coq.mk-app EF [x,y]} (R x y).

main (inductive Ind _) (inductive Ind _) PI PJ EF {{ fix rec (x1 : lp:I) (x2 : lp:J) {struct x1} : bool := lp:(R rec x1 x2) }} :- coq.env.recursive? Ind, !,
  coq.mk-app (global (indt Ind)) {std.rev PI} I,
  coq.mk-app (global (indt Ind)) {std.rev PJ} J,
  @pi-decl `rec` {{ lp:I -> lp:J -> bool }} rec\
  @pi-decl `x1` I x1\
  @pi-decl `x2` J x2\
    do-match x1 I x2 J {coq.mk-app EF [rec]} (R rec x1 x2).

main (inductive Ind _) (inductive Ind _) PI PJ EF {{ fun (x1 : lp:I) (x2 : lp:J) => lp:(R x1 x2) }} :-
  coq.mk-app (global (indt Ind)) {std.rev PI} I,
  coq.mk-app (global (indt Ind)) {std.rev PJ} J,
  @pi-decl `x1` I x1\
  @pi-decl `x2` J x2\
    do-match x1 I x2 J {coq.mk-app EF [{{fun (_ : lp:I) (_ : lp:J) => true}}]} (R x1 x2).

% -----------------------------------------------------------------------------
pred do-match i:term, i:term, i:term, i:term, i:term, o:term.
do-match X1 I X2 J F R :-
  coq.build-match X1 I
    (_\_\_\r\ r = {{ bool }})
    (do-branch X2 J F)
    R.

% -----------------------------------------------------------------------------
pred do-branch i:term, i:term, i:term, i:term, i:term, i:list term, i:list term, o:term.
do-branch X2 J F K KTY Vars _ {{ @eqb_core_defs.eqb_body _ _ _ _ lp:FLDP lp:F lp:TAG lp:X lp:X2 }} :- std.do! [
  coq.safe-dest-app KTY (global (indt I)) ParamsI,
  std.assert! (fields-for I _ FLD _ _) "derive.eqb: run derive.fields before",
  coq.safe-dest-app J _ ParamsJ,
  coq.mk-app (global (const FLD)) ParamsJ FLDP,

  std.assert! (tag-for I T) "derive.eqb: run derive.tag before",
  coq.mk-app (global (const T)) {std.append ParamsI [{coq.mk-app K Vars}]} TAG,

  coq.safe-dest-app K (global (indc KI)) _,
  std.assert! (box-for KI _ BK) "derive.eqb: run derive.fields before",
  coq.mk-app (global (indc BK)) {std.append ParamsI Vars} X,
].

% -----------------------------------------------------------------------------
% example: eqb-for {{ list lp:A }} {{ @list_eqb lp:A lp:F }} :- eqb-for A F.

pred do-clause i:eqType, i:eqType, i:list term, i:list term, i:term, i:list prop, o:prop.

do-clause (type-param AI) (type-param AJ) PI PJ F Todo (pi a ea\ C a ea) :- !,
  pi x a ea\
    do-clause (AI x) (AJ x) [a|PI] [a|PJ] {coq.mk-app F [a,ea]} [eqb-for a a ea|Todo] (C a ea).

do-clause (value-param _ AI) (value-param _ AJ) PI PJ F Todo (pi a b\ C a b) :- !,
  pi x a b\
    do-clause (AI x) (AJ x) [a|PI] [b|PJ] {coq.mk-app F [a,b]} Todo (C a b).

do-clause (inductive Ind _) (inductive Ind _) PI PJ F Todo (eqb-for I J F :- Todo) :-
  coq.mk-app (global (indt Ind)) {std.rev PI} I,
  coq.mk-app (global (indt Ind)) {std.rev PJ} J.


}

namespace derive.eqb.eqbf {

% -----------------------------------------------------------------------------
pred main i:eqType, i:eqType, i:list term, i:list term, o:term.

main (type-param FI) (type-param FJ) PI PJ {{ fun (p : Type) (eqp : p -> p -> bool) => lp:(R p eqp) }} :-
  @pi-trm `P` {{ Type }} x\p\
  @pi-decl `eqP` {{ lp:p -> lp:p -> bool }} eqP\
    eqb-for p p eqP =>
    main (FI x) (FJ x) [p|PI] [p|PJ] (R p eqP).

main (value-param TYI FI) (value-param TYJ FJ) PI PJ {{ fun (x y : lp:T) => lp:(R x y) }} :-
  feqb.trm->term TYI TI,
  feqb.trm->term TYJ TJ,
  @pi-trm `P` TI xx\x\
  @pi-trm `P` TJ yy\y\
    main (FI xx) (FJ yy) [x|PI] [y|PJ] (R x y).

main (inductive Ind F) (inductive Ind G) PI PJ {{ fun (rec : lp:I -> lp:J -> bool) (x : positive) => lp:(R rec x) }} :- std.do! [
  std.rev PI ParamsI,
  std.rev PJ ParamsJ,
  coq.mk-app (global (indt Ind)) ParamsI I,
  coq.mk-app (global (indt Ind)) ParamsJ J,
  std.assert! (fields-for Ind F_t _ _ _) "derive.eqb: run derive.fields before",
  coq.mk-app (global (const F_t)) ParamsI Fields_t_I,
  coq.mk-app (global (const F_t)) ParamsJ Fields_t_J,
  (@pi-decl `rec` {{ lp:I -> lp:J -> bool }} rec\
  @pi-decl `x` {{ positive }} x\
  eqb-for I J rec =>
  pi i j\
   (feqb.trm->term i I :- !) =>
   (feqb.trm->term j J :- !) =>
     derive.fields.splay-over-positive x {std.zip (F i) (G j)} (rty Fields_t_I Fields_t_J)
       {{ fun (_ : lib:elpi.derive.unit) (_ : lib:elpi.derive.unit) => true }}
       (fields ParamsI ParamsJ)
       (R rec x)),
].
pred rty i:term, i:term, i:term, o:term.
rty Fields_t_I Fields_t_J X {{ lp:Fields_t_I lp:X -> lp:Fields_t_J lp:X -> bool }}.

% -----------------------------------------------------------------------------
pred fields i:list term, i:list term, i:pair constructor constructor, o:term.

fields ParamsI ParamsJ (pr (constructor K (stop _)) (constructor K (stop _))) {{ fun (a  : lp:BoxTy1) (b : lp:BoxTy2) => true }} :- std.do! [
  std.assert! (box-for K IB _) "derive.eqb: run derive.fields before",
  coq.mk-app (global (indt IB)) ParamsI BoxTy1,
  coq.mk-app (global (indt IB)) ParamsJ BoxTy2,
].

fields ParamsI ParamsJ (pr (constructor K Args) (constructor K Args2)) {{ fun (a  : lp:BoxTy1) (b : lp:BoxTy2) => lp:(R a b) }} :- std.do! [
  std.assert! (box-for K IB _) "derive.eqb: run derive.fields before",
  coq.mk-app (global (indt IB)) ParamsI BoxTy1,
  coq.mk-app (global (indt IB)) ParamsJ BoxTy2,
  @pi-decl `a` BoxTy a\
  @pi-decl `b` BoxTy b\
    coq.build-match a BoxTy1 fields.rty1 (fields.branch1 b BoxTy2 Args Args2) (R a b)
].

pred fields.rty1 i:term, i:list term, i:list term, o:term.
fields.rty1  _ _ _ {{ bool }}.

pred fields.branch1 i:term, i:term, i:arguments, i:arguments, i:term, i:term, i:list term, i:list term, o:term.
fields.branch1 B BoxTy2 Args Args2 _ _ VarsA _ R :-
    coq.build-match B BoxTy2 fields.rty2 (fields.branch2 Args Args2 VarsA) R.

pred fields.rty2 i:term, i:list term, i:list term, o:term.
fields.rty2 _ _ _ {{ bool }}.

pred fields.branch2 i:arguments, i:arguments, i:list term, i:term, i:term, i:list term, i:list term, o:term.
fields.branch2 Args Args2 VarsA _ _ VarsB _ R :-
fields.aux Args Args2 VarsA VarsB R.


pred fields.aux i:arguments, i:arguments, i:list term, i:list term, o:term.

fields.aux (dependent TYX FX) (dependent TYY FY) [X|XS] [Y|YS] {{ lib:elpi.andb (lp:EQB lp:X lp:Y) lp:R1 }} :- 
  feqb.trm->term TYX TX,
  feqb.trm->term TYY TY,
  std.assert! (eqb-for TX TY EQB) "??",
  @pi-decl `p` TX n\ pi a\ (feqb.trm->term a n :- !) =>
  @pi-decl `p` TY m\ pi b\ (feqb.trm->term b m :- !) =>
    fields.aux (FX a) (FY b) XS YS (R n m),
  R1 = R X Y.

fields.aux (regular TYX FX) (regular TYY FY)  [X|XS] [Y|YS] {{ lib:elpi.andb (lp:EQB lp:X lp:Y) lp:R }} :- 
  feqb.trm->term TYX TX,
  feqb.trm->term TYY TY,
  std.assert! (eqb-for TX TY EQB) "??",
  fields.aux FX FY XS YS R.

fields.aux (irrelevant _ FX) (irrelevant _ FY) [_|XS] [_|YS] R :- fields.aux FX FY XS YS R.

fields.aux (stop _) (stop _) [] [] {{ true }}.

% -----------------------------------------------------------------------------
% example:
%   eqb-fields {{ list lp:A }} {{ @list_eqb_fields lp:A lp:EA lp:ELA }} :-
%      eqb-for A EA, eqb-for {{ list lp:A }} ELA.
pred do-clause i:eqType, i:eqType, i:list term, i:list term, i:term, i:list prop, o:prop.

do-clause (type-param AI) (type-param AJ) PI PJ F Todo (pi a ea\ C a ea) :- !,
  pi x a ea\
    do-clause (AI x) (AJ x) [a|PI] [a|PJ] {coq.mk-app F [a,ea]} [eqb-for a a ea|Todo] (C a ea).

do-clause (value-param _ AI) (value-param _ AJ) PI PJ F Todo (pi a b\ C a b) :- !,
  pi x a b\
    do-clause (AI x) (AJ x) [a|PI] [b|PJ] {coq.mk-app F [a,b]} Todo (C a b).

do-clause (inductive Ind _) (inductive Ind _) PI PJ F Todo (pi ela\ eqb-fields I J (F1 ela) :- [C ela|Todo]) :- !,
  coq.mk-app (global (indt Ind)) {std.rev PI} I,
  coq.mk-app (global (indt Ind)) {std.rev PJ} J,
  pi ela\
    (coq.mk-app F [ela] (F1 ela), C ela = eqb-for I J ela).
     
}
