/* map over a container                                                      */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{assert!, do!, length, split-at, drop-last, rev, append}.

param1-functor-db (app[global (indt GR1)|A1]) (app[global (indt GR2)|A2]) R :-
  coq.env.indt GR1 _ Lno1 _ _ _ _,
  coq.env.indt GR2 _ Lno2 _ _ _ _,
  {length A1} > Lno1, {length A2} > Lno2,
  split-at Lno1 A1 Args1 Points1,
  split-at Lno2 A2 Args2 Points2,
  Points1 = Points2, !,
  param1-functor-db {coq.mk-app (global (indt GR1)) Args1} {coq.mk-app (global (indt GR2)) Args2} F,
  coq.mk-app F Points1 R.

namespace derive.param1.functor {

pred skip i:int. % position of a parameter that has to be skipped

% Building the body %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pred self o:term.

pred bo-idx
  i:term, % inductive arity (input)
  i:term, % inductive type (input) applied to params & idx handled so far
  i:term, % inductive type (output) applied to params & idx handled so far
  i:int,  % current index no
  o:int, % Recno
  i:list term, % rev list of (output) parameters
  o:term, % body
  o:term. % type

bo-idx (prod _ S1 T1) Ity1 Ity2 N M Ps (fun `x` S1 Bo) (prod `x` S1 Ty) :- !,
  pi x\ sigma Ity1x Ity2x\
    coq.mk-app  Ity1 [x] Ity1x,
    coq.mk-app  Ity2 [x] Ity2x,
    N1 is N + 1,
    decl x `x` S1 => bo-idx (T1 x) Ity1x Ity2x N1 M Ps (Bo x) (Ty x).

bo-idx (sort _) Ity1 Ity2 N N Ps (fun `x` Ity1 Bo) (prod `_` Ity1 _\ Ity2) :- !,
  @pi-decl `x` Ity1 x\
    coq.build-match x Ity1 (bo-idx-rty Ps Ity2) (bo-k-args Ps) (Bo x).

bo-idx X Ity1 Ity2 N M Ps R1 R2 :- whd1 X X1, !,
  bo-idx X1 Ity1 Ity2 N M Ps R1 R2.

pred bo-idx-rty i:list term, i:term, i:term, i:list term, i:list term, o:term.
bo-idx-rty Ps ItyArgs _ Vs _ R :-
  rev Vs [_|IdxsRev],
  rev IdxsRev Idxs,
  coq.safe-dest-app ItyArgs HD _,
  coq.mk-app HD {append {rev Ps} Idxs} R.

pred bo-k-args i:list term, i:term, i:term, i:list term, i:list term, o:term.
bo-k-args ParamsRev K _ Args Tys R :-
  rev ParamsRev Params,
  coq.safe-dest-app K (global (indc GR)) _,
  coq.env.typeof (indc GR) T, coq.subst-prod Params T KT,
  (bo-k-args.aux {coq.mk-app (global (indc GR)) Params} Args Tys KT R).

bo-k-args.aux K [A,PA|Args] [_,TPA|Types] {{ forall x (px : lp:(TPB x)), lp:(Ty x px) }} R :-
  not(same_term TPA (TPB A)), param1-functor-db TPA (TPB A) F, !,
  coq.mk-app K [A, {{ lp:F lp:PA }}] KAPFA,
  bo-k-args.aux KAPFA Args Types (Ty A KAPFA) R.

bo-k-args.aux K [A,PA|Args] [_,_|Types] {{ forall x px, lp:(Ty x px) }} R :-
  coq.mk-app K [A,PA] KAPA,
  bo-k-args.aux KAPA Args Types (Ty A KAPA) R.

bo-k-args.aux R [] [] _ R.

% Take in input a mapping function for each parameter (not to be skipped)
% and then do the fixpoint

pred bo-params
  i:int, % current parameter
  i:int, % number of parameters
  i:term, % inductive type (input) applied to parameters handled so far
  i:term, % inductive type (output) applied to parameters handled so far
  i:term, % inductive arity (input)
  i:term, % inductive arity (output)
  i:list term, % output parameters so far
  o:term. % map function

pred mk-rec-clause i:term, i:term, i:term, i:term, o:prop.
mk-rec-clause (prod _ _ x\prod _ _ (P x)) T1 T2 F (pi x px\C x px) :-
  pi x px\ mk-rec-clause (P x px) {coq.mk-app T1 [x,px]} {coq.mk-app T2 [x,px]} {coq.mk-app F [x,px]} (C x px).
mk-rec-clause (prod _ _ _\sort _) T1 T2 F (param1-functor-db T1 T2 F).

pred mk-rec-clause-app i:term, i:term, i:term, i:term, o:prop.
mk-rec-clause-app (prod _ _ x\prod _ _ (P x)) T1 T2 F (pi x px py\C x px py) :-
  pi x px py\ mk-rec-clause-app (P x px) {coq.mk-app T1 [x,px]} {coq.mk-app T2 [x,py]} {coq.mk-app F [x,px]} (C x px py).
mk-rec-clause-app (prod _ _ _\sort S) T1 T2 F (pi x\C x) :-
  pi x \ mk-rec-clause-app (sort S) {coq.mk-app T1 [x]} {coq.mk-app T2 [x]} {coq.mk-app F [x]} (C x).
mk-rec-clause-app (sort _) T1 T2 F (param1-functor-db T1 T2 F).

bo-params Lno Lno Ity1 Ity2 A1 _ Ps (fix `f` Recno Fty Bo) :- !,
  @pi-decl `rec` Fty f\
      mk-rec-clause A1 Ity1 Ity2 f (C f),
      mk-rec-clause-app A1 Ity1 Ity2 f (D f),
      (D f) => (C f) => bo-idx A1 Ity1 Ity2 0 Recno Ps (Bo f) Fty.

bo-params N Lno Ity1 Ity2 {{ forall (a : lp:T1) (p : a -> Type), lp:(Rty1 a p) }}
                          {{ forall (a : _) (p : a -> Type), lp:(Rty2 a p) }}
                          Ps R :- whd T1 [] {{ Type }} [], !,
  N1 is N + 2,
  (pi a b f \ mk-map-ty a {{ lp:a -> Type }} b {{ lp:b -> Type }} (FAB a b) f _ (Clause a b f)),
  R = {{ fun (a : Type) (pa pb : a -> Type) (f : forall x : a, pa x -> pb x) => lp:(Bo a pa pb f) }},
  pi a pa pb f\ sigma Ity1A Ity2A \
    coq.mk-app Ity1 [a,pa] Ity1A,
    coq.mk-app Ity2 [a,pb] Ity2A,
    Clause pa pb f =>
    decl a `a` {{ Type }} =>
    decl pa `pa` {{ lp:a -> Type }} =>
    decl pb `pb` {{ lp:a -> Type }} =>
    decl f `f` (FAB pa pb) =>
      bo-params N1 Lno Ity1A Ity2A (Rty1 a pa) (Rty2 a pb) [pb,a|Ps] (Bo a pa pb f).

bo-params N Lno Ity1 Ity2 (prod A Sty1 Rty1) (prod _ _ Rty2) Ps R :- 
  N1 is N + 1,
  R = (fun A Sty1 a\ Bo a),
  pi a\ sigma Ity1A Ity2A \
    coq.mk-app Ity1 [a] Ity1A,
    coq.mk-app Ity2 [a] Ity2A,
      decl a A Sty1 => bo-params N1 Lno Ity1A Ity2A (Rty1 a) (Rty2 a) [a|Ps] (Bo a).

pred map-pi i:A, o:list B.
map-pi (x\ []) [].
map-pi (x\ [X x| XS x]) [pi x\ X x | YS] :- map-pi XS YS.

pred mk-map-ty
 i:term, % input variable
 i:term, % and its type
 i:term, % output variable
 i:term, % an its type
 o:term, % type of a mapping function from input to output
 i:term, % map function (having the type above)
 o:int,  % arity of the predicate
 o:list prop. % param1-functor-db clause for map function
mk-map-ty A (prod _ SA T1) B (prod _ SB T2) (prod `x` SA x\ R x) F N C1 :-
  param1-functor-db SA SB Fa, !,
  (pi x\ sigma Ax Fx BFx \
    coq.mk-app A [x] Ax, coq.mk-app Fa [x] Fx, coq.mk-app B [Fx] BFx,
    mk-map-ty Ax (T1 x) BFx (T2 BFx) (R x) {coq.mk-app F [x]} M (C x),
    N is M + 1),
  map-pi C C1.
mk-map-ty A (prod _ S1 T1) B (prod _ _ T2) (prod `x` S1 x\ R x) F N C1 :-
  (pi x\ sigma Ax Bx \ coq.mk-app A [x] Ax, coq.mk-app B [x] Bx,
    mk-map-ty Ax (T1 x) Bx (T2 x) (R x) {coq.mk-app F [x]} M (C x),
    N is M + 1),
  map-pi C C1.
mk-map-ty (app[X|XS] as A) _ (app[Y|YS] as B) _ (prod `x` A _\ B) (app [G|GS] as F) 0 [param1-functor-db PLA PLB PLF,param1-functor-db A B F] :-
  drop-last 1 XS LA,
  drop-last 1 YS LB,
  drop-last 1 GS LF,
  coq.mk-app X LA PLA,
  coq.mk-app Y LB PLB,
  coq.mk-app G LF PLF.
mk-map-ty A _ B _ (prod `x` A _\ B) F 0 [param1-functor-db A B F].

% Build a clause %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred mk-clause
  i:int, % current parameter
  i:int, % number of parameters
  i:term, % inductive type (input)
  i:term, % inductive type (output)
  i:term, % arity of the inductive
  i:list prop, % premises of the clause
  i:term, % map function
  o:prop,
  i:inductive,
  i:list bool,
  o:prop. % clause for param1-functor-db
mk-clause N N Ity1 Ity2 _ Todo Map (param1-functor-db Ity1 Ity2 Map :- Todo) I Mask (param1-functor-for I F MaskRev) :- coq.safe-dest-app Map (global F) _, std.rev Mask MaskRev.
mk-clause N Lno Ity1 Ity2 {{ forall (a : lp:Ty) (pa : a -> Type), lp:(T a pa) }} Todo Map (pi x px py f\ C x px py f) I M CF :- whd Ty [] {{ Type }} [], !,
  N1 is N + 2,
  pi x px py f\ sigma Ity1x Ity2y Mapf\
    coq.mk-app Ity1 [x,px] Ity1x,
    coq.mk-app Ity2 [x,py] Ity2y,
    coq.mk-app Map [x,px,py,f] Mapf,
    mk-clause N1 Lno Ity1x Ity2y (T x px) [param1-functor-db px py f|Todo] Mapf (C x px py f) I [tt,ff|M] CF.
mk-clause N Lno Ity1 Ity2 (prod _ _ T) Todo Map (pi x\ C x) I M CF :- !,
  N1 is N + 1,
  pi x\ sigma Ity1x Ity2x Mapf\
    coq.mk-app Ity1 [x] Ity1x,
    coq.mk-app Ity2 [x] Ity2x,
    coq.mk-app Map [x] Mapf,
    mk-clause N1 Lno Ity1x Ity2x (T x) Todo Mapf (C x) I [ff|M] CF.
mk-clause N Lno Ity1 Ity2 X Todo Map C I M CF :- whd1 X X1, !,
  mk-clause N Lno Ity1 Ity2 X1 Todo Map C I M CF.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pred main i:inductive, i:string, o:list prop.
main GR Suffix C :- do! [
  coq.env.indt GR _Ind Lno Luno Arity _ _,
  assert! (Lno = Luno) "derive.param1.functor: Non-uniform parameters not supported",

  % generate map and add to the env
  T = global (indt GR),
  bo-params 0 Lno T T Arity Arity [] R,
  std.assert-ok! (coq.typecheck R Rty) "derive.param1_functor generates illtyped term",

  Name is {coq.gref->id (indt GR)} ^ Suffix,
  coq.env.add-const Name R Rty @transparent! Funct,

  % generate clause and add to the db
   mk-clause 0 Lno T T Arity [] (global (const Funct)) Clause1 GR [] Clause2,
  C = [Clause1, Clause2],
  std.forall C (x\coq.elpi.accumulate _ "derive.param1.functor.db" (clause _ _ x)),
].
  
}
