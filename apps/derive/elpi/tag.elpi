/* constructor name first class representation                               */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% not necessary, but gives pointers to relevant files
shorten std.{ fold-map , do! , last }. % from elpi-builtin.elpi
shorten coq.{ build-match , bind-ind-arity }.   % from coq-lib.elpi
shorten coq.{ elaborate-skeleton }.             % from coq-builtin.elpi

% if we load this file together with others files, we avoid chlashes
namespace derive.tag {

% we return the clauses for the tag.db since we may need them right away
% if we run other derivations immediately
pred main i:inductive, i:string, o:list prop.
main I Prefix CL :- do! [

  % build   fun params (x : I params) => ... do-match ...
  coq.env.indt I _ _ _ Arity _ _,
  bind-ind-arity (global (indt I)) Arity do-match BodyR,

  % typecheck (and infer univ constraints)
  std.assert-ok! (elaborate-skeleton BodyR Ty Body) "derive.tag generates illtyped code",

  % save constant
  Name is Prefix ^ "tag",
  coq.env.add-const Name Body Ty ff C,

  % store in the DB the tag function, so that other Elpi commands can find it
  CL = [tag-for I C],
  std.forall CL (x\ coq.elpi.accumulate _ "derive.tag.db" (clause _ _ x)),
].

% We build the match with dummy branches (you get the lambdas for the
% arguments of constructors, then Prop). Then we put the right number in place.
pred do-match i:term, i:list term, i:list term, o:term.
do-match _ Vars Tys (match X Rty BL1) :- do! [
  last Vars X, % the last variable is the one for the inductive type
  last Tys XTy,
  build-match X XTy do-rty do-dummy-branch (match X Rty BL),
  fold-map BL {{ 1 }} do-branch BL1 _,
].

% builds the return clause of the match
pred do-rty i:term, i:list term,i:list term, o:term.
do-rty _ _ _ {{ lib:elpi.derive.positive }}.

% build each branch
pred do-dummy-branch i:term, i:term, i:list term, i:list term, o:term.
do-dummy-branch _ _ _ _ {{ Prop }}. % dummy

% [do-branch InTerm Acc NewTem NewAcc] descends into a branch and puts Acc
% in place of the dummy
pred do-branch i:term, i:term, o:term, o:term.
do-branch {{ Prop }} X X Y :- coq.reduction.lazy.norm {{ lp:X + 1 }} Y.
do-branch (fun N T F) X (fun N T R) Y :-
  @pi-decl N T x\ do-branch (F x) X (R x) Y.

}